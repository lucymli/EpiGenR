// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// simulate_sir
List simulate_sir(SEXP Rparams, double dt, int max_num_dt, int min_epi_size, int maximum_attempts, bool track_transmissions);
RcppExport SEXP _EpiGenR_simulate_sir(SEXP RparamsSEXP, SEXP dtSEXP, SEXP max_num_dtSEXP, SEXP min_epi_sizeSEXP, SEXP maximum_attemptsSEXP, SEXP track_transmissionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rparams(RparamsSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< int >::type max_num_dt(max_num_dtSEXP);
    Rcpp::traits::input_parameter< int >::type min_epi_size(min_epi_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type maximum_attempts(maximum_attemptsSEXP);
    Rcpp::traits::input_parameter< bool >::type track_transmissions(track_transmissionsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_sir(Rparams, dt, max_num_dt, min_epi_size, maximum_attempts, track_transmissions));
    return rcpp_result_gen;
END_RCPP
}
// get_transmission_tree
NumericMatrix get_transmission_tree(SEXP Repidemic);
RcppExport SEXP _EpiGenR_get_transmission_tree(SEXP RepidemicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Repidemic(RepidemicSEXP);
    rcpp_result_gen = Rcpp::wrap(get_transmission_tree(Repidemic));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_EpiGenR_simulate_sir", (DL_FUNC) &_EpiGenR_simulate_sir, 6},
    {"_EpiGenR_get_transmission_tree", (DL_FUNC) &_EpiGenR_get_transmission_tree, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_EpiGenR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
